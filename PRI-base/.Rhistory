}
print(paste("PDF saved:",file))
this$lastpath = filepath
}
fcs$savePNG <- function (tdata=NULL,single=FALSE) {
this=fcs
if (this$working) printf("w do savePNG: single=%s", single)
xminval = as.numeric(tkget(this$minvalX))
xmaxval = as.numeric(tkget(this$maxvalX))
yminval = as.numeric(tkget(this$minvalY))
ymaxval = as.numeric(tkget(this$maxvalY))
binsize = as.numeric(tkget(this$binsize))
mincount = as.numeric(tkget(this$mincount))
checkCALC = tclvalue(this$rbcalc)
checkTRANS = tclvalue(this$rbtrans)
checkGATED = tclvalue(this$cbtgatedata)
checkGRID = tclvalue(this$cbtshowgrid)
prodcells.col = "black"
quadrants.col = "black"
# if path didnt save yet
if (!exists("lastpath",where=eval(parse(text="fcs")))){
this$lastpath = getwd()
}
if (single==TRUE) {
displayfile = tclvalue(tkget(this$tkchoosefile))
displayfile = this$shortenFilename(displayfile)
v1=tclvalue(tkget(this$cbvar1))
v2=tclvalue(tkget(this$cbvar2))
v3=tclvalue(tkget(this$cbvar3))
vars = c(v1,v2,v3)
png.name = file.path(sprintf("%s_%s_%s_%s_%s.png",displayfile,paste(vars,collapse="_"),checkTRANS,checkCALC,this$version))
file <- tkgetSaveFile(initialdir= this$lastpath, defaultextension=".png", initialfile=png.name)
cutoff_idx = which(this$current.vars==v1)
cutoff_idy = which(this$current.vars==v2)
cutoff_idz = which(this$current.vars==v3)
cutoffs = c(cutoff_idx,cutoff_idy,cutoff_idz)
tdata = as.matrix(this$data[vars])
### if percentage is checked
# calculate cutoffs and set check button to zero
for ( i in 1:length(cutoffs)) {
if ( tclvalue(this$cbcutoffperc[[cutoffs[i]]]) == "1" ) {
cutoffs[i] = this$calcCUTOFF(tdata[vars[i]],this$checkDigits(cutoff_id=cutoffs[i]),vars[i],cutoffs[i])
} else {
cutoffs[i] = this$checkDigits(cutoff_id=cutoffs[i])
}
}
} else {
vars = colnames(tdata)
png.folder = file.path(this$lastpath,"png")
if ( grepl("linux",sessionInfo()$R.version$os) ) {
system(paste("mkdir -p -v ",png.folder,sep=""))
} else {
system(paste("mkdir ",png.folder,sep=""))
}
if ( this$OverviewGate ) {
displayfile = this$plot.attr[[1]]$file.name
} else {
displayfile=tclvalue(tkget(this$tkchoosefile))
}
displayfile = this$shortenFilename(displayfile)
file = file.path(png.folder,sprintf("%s_%s_%s_%s_%s.png",displayfile,paste(vars,collapse="_"),checkTRANS,checkCALC,this$version))
}
### remove file name to get file path
filepath = unlist(strsplit(as.character(file),"/"))
filepath = filepath[-length(filepath)]
filepath = paste(filepath,collapse="/")
this$lastpath = filepath
### png plot
toPNG(filepath,width=800,height=850,bg="transparent", {
#png(file=png.file,width=800,height=850,bg="transparent")
par(oma=c(2,2,2,1),mar=c(4.5,4.5,5,1))
#png.cur=dev.cur()
#### plot start
set.cex=1.4
set.cex.axes=1.1
set.mgp=c(1.9, 0.6, 0)
if ( cutoffs[1] > 0 & cutoffs[2] > 0 ) title.axis = c(sprintf("%s (%s)",v1,cutoffs[1]),sprintf("%s (%s)",v2,cutoffs[2]))
else title.axis = c(v1,v2)
plot(1,type='n',frame.plot=FALSE,xlim=c(xminval,xmaxval+10*binsize),axes=FALSE,
ylim=c(yminval-2.5*binsize,ymaxval+5*binsize),xlab=title.axis[1],ylab=title.axis[2],cex.lab=set.cex,cex.axis=0.5*set.cex.axes,mgp=set.mgp)
box(lwd=0.8,col="darkgrey")
# draw an axis on the bottom
# draw an axis on the left
if ( checkTRANS == "asinh") {
asinh.scale = c(asinh(-1000),asinh(-100),asinh(-10),asinh(0),asinh(10),asinh(100),asinh(1000),asinh(10000),asinh(100000),asinh(1000000),asinh(10000000),asinh(100000000))
axis(side=1, at=asinh.scale,labels=c("1e-3","1e-2","1e-1","0","1e1","1e2","1e3","1e4","1e5","1e6","1e7","1e8"),las=1,cex.axis=set.cex.axes,mgp=set.mgp,col="darkgrey")
axis(side=2, at=asinh.scale,labels=c("1e-3","1e-2","1e-1","0","1e1","1e2","1e3","1e4","1e5","1e6","1e7","1e8"),las=3,cex.axis=set.cex.axes,mgp=set.mgp,col="darkgrey")
} else {
biex.scale = c(0,1000,2000,3000,4000,5000,6000)
axis(side=1, at=biex.scale,labels=c(0,1000,2000,3000,4000,5000,6000),las=1,cex.axis=set.cex.axes,mgp=set.mgp,col="darkgrey")
axis(side=2, at=biex.scale,labels=c(0,1000,2000,3000,4000,5000,6000),las=3,cex.axis=set.cex.axes,mgp=set.mgp,col="darkgrey")
}
# grid
if(checkGRID=="1") {
if (checkTRANS == "asinh") {
xgrid.steps=seq((xminval),(xmaxval),by=2)
ygrid.steps=seq((yminval),(ymaxval),by=2)
abline(h=ygrid.steps,v=xgrid.steps,col="grey",lty=3)
} else {
xgrid.steps=seq((xminval),(xmaxval),by=500)
ygrid.steps=seq((yminval),(ymaxval),by=500)
abline(h=ygrid.steps,v=xgrid.steps,col="grey",lty=3)
}
}
### calc quadrants in total
ncells = ncells.total = nrow(tdata)
# q1 Quadrant unten links
# q2 Quadrant unten rechts
# q3 Quadrant oben rechts
# q4 Quadrant oben links
if ( checkCALC != "MFI(+)" & cutoffs[1] > 0 & cutoffs[2] > 0 ) {
tdata.q1 = tdata[which( tdata[,1]<cutoffs[1] &  tdata[,2]<cutoffs[2] ),3]
tdata.q2 = tdata[which( tdata[,1]>=cutoffs[1] &  tdata[,2]<cutoffs[2] ),3]
tdata.q3 = tdata[which( tdata[,1]>=cutoffs[1] &  tdata[,2]>=cutoffs[2] ),3]
tdata.q4 = tdata[which( tdata[,1]<cutoffs[1] &  tdata[,2]>=cutoffs[2] ),3]
this$q1.total = abs(100 * length( tdata.q1 ) / ncells)
this$q2.total = abs(100 * length( tdata.q2 ) / ncells)
this$q3.total = abs(100 * length( tdata.q3 ) / ncells)
this$q4.total = abs(100 - this$q1.total - this$q2.total - this$q3.total)
if ( cutoffs[3]>0 ) {
this$q1.prodcells = 100 * length(tdata.q1[which(tdata.q1>=cutoffs[3])]) /length(tdata.q1)
if (is.nan(this$q1.prodcells)) this$q1.prodcells = 0
this$q2.prodcells = 100 * length(tdata.q2[which(tdata.q2>=cutoffs[3])]) /length(tdata.q2)
if (is.nan(this$q2.prodcells)) this$q2.prodcells = 0
this$q3.prodcells = 100 * length(tdata.q3[which(tdata.q3>=cutoffs[3])]) /length(tdata.q3)
if (is.nan(this$q3.prodcells)) this$q3.prodcells = 0
this$q4.prodcells = 100 * length(tdata.q4[which(tdata.q4>=cutoffs[3])]) /length(tdata.q4)
if (is.nan(this$q4.prodcells)) this$q4.prodcells = 0
prodcells.col = "red"
}
} else if ( checkCALC == "MFI(+)" ) {
# if only do MFI plots on producing cells
this$bintriplot(tdata,cutoffs,bin.size=binsize,mincells=mincount,bg=TRUE)
# cut all cells which are not producing cells
tdata=tdata[which(tdata[,3]> cutoffs[3]),]
ncells = nrow(tdata)
tdata.q1 = tdata[which( tdata[,1]<cutoffs[1] &  tdata[,2]<cutoffs[2] ),3]
tdata.q2 = tdata[which( tdata[,1]>=cutoffs[1] &  tdata[,2]<cutoffs[2] ),3]
tdata.q3 = tdata[which( tdata[,1]>=cutoffs[1] &  tdata[,2]>=cutoffs[2] ),3]
tdata.q4 = tdata[which( tdata[,1]<cutoffs[1] &  tdata[,2]>=cutoffs[2] ),3]
this$q1.total = abs(100 * length( which( tdata[,1]<cutoffs[1] &  tdata[,2]<cutoffs[2] ) ) / ncells)
this$q2.total = abs(100 * length( which( tdata[,1]>=cutoffs[1] &  tdata[,2]<cutoffs[2] ) ) / ncells)
this$q3.total = abs(100 * length( which( tdata[,1]>=cutoffs[1] &  tdata[,2]>=cutoffs[2] ) ) / ncells)
this$q4.total = abs(100 - this$q1.total - this$q2.total - this$q3.total)
if ( cutoffs[3]>0 ) {
this$q1.prodcells = 100 * length(tdata.q1[which(tdata.q1>=cutoffs[3])]) / ncells.total
if (is.nan(this$q1.prodcells)) this$q1.prodcells = 0
this$q2.prodcells = 100 * length(tdata.q2[which(tdata.q2>=cutoffs[3])]) / ncells.total
if (is.nan(this$q2.prodcells)) this$q2.prodcells = 0
this$q3.prodcells = 100 * length(tdata.q3[which(tdata.q3>=cutoffs[3])]) / ncells.total
if (is.nan(this$q3.prodcells)) this$q3.prodcells = 0
this$q4.prodcells = 100 * length(tdata.q4[which(tdata.q4>=cutoffs[3])]) / ncells.total
if (is.nan(this$q4.prodcells)) this$q4.prodcells = 0
prodcells.col = "chartreuse4"
quadrants.col = "blue"
}
}
tdata.zero = tdata[apply(tdata[, -1], MARGIN = 1, function(row) {all(row > 0)}), ]
ncells.zero=nrow(tdata.zero)
### calc quadrants with only positive values
# q1 Quadrant unten links
# q2 Quadrant unten rechts
# q3 Quadrant oben rechts
# q4 Quadrant oben links
if ( cutoffs[1] > 0 & cutoffs[2] > 0 ) {
q1.zero = abs(100 * length( which( tdata.zero[,1]<cutoffs[1] &  tdata.zero[,2]<cutoffs[2] ) ) / ncells.zero)
q2.zero = abs(100 * length( which( tdata.zero[,1]>=cutoffs[1] &  tdata.zero[,2]<cutoffs[2] ) ) / ncells.zero)
q3.zero = abs(100 * length( which( tdata.zero[,1]>=cutoffs[1] &  tdata.zero[,2]>=cutoffs[2] ) ) / ncells.zero)
q4.zero = abs(100 - q1.zero - q2.zero - q3.zero)
}
this$bintriplot(tdata,cutoffs,set.cex=label.cex,set.cex.axes=axes.cex,set.mgp=set.mgp,bin.size=binsize,mincells=mincount, prodcells.color = prodcells.col, quadrants.color = quadrants.col)
### calc quadrants in total
ncells = nrow(tdata)
# q1 Quadrant unten links
# q2 Quadrant unten rechts
# q3 Quadrant oben rechts
# q4 Quadrant oben links
if ( cutoffs[1] > 0 & cutoffs[2] > 0 ) {
tdata.q1 = tdata[which( tdata[,1]<cutoffs[1] &  tdata[,2]<cutoffs[2] ),3]
tdata.q2 = tdata[which( tdata[,1]>=cutoffs[1] &  tdata[,2]<cutoffs[2] ),3]
tdata.q3 = tdata[which( tdata[,1]>=cutoffs[1] &  tdata[,2]>=cutoffs[2] ),3]
tdata.q4 = tdata[which( tdata[,1]<cutoffs[1] &  tdata[,2]>=cutoffs[2] ),3]
this$q1.total = abs(100 * length( tdata.q1 ) / ncells)
this$q2.total = abs(100 * length( tdata.q2 ) / ncells)
this$q3.total = abs(100 * length( tdata.q3 ) / ncells)
this$q4.total = abs(100 - this$q1.total - this$q2.total - this$q3.total)
if ( cutoffs[3]>0 ) {
this$q1.prodcells = 100 * length(tdata.q1[which(tdata.q1>=cutoffs[3])]) /length(tdata.q1)
if (is.nan(this$q1.prodcells)) this$q1.prodcells = 0
this$q2.prodcells = 100 * length(tdata.q2[which(tdata.q2>=cutoffs[3])]) /length(tdata.q2)
if (is.nan(this$q2.prodcells)) this$q2.prodcells = 0
this$q3.prodcells = 100 * length(tdata.q3[which(tdata.q3>=cutoffs[3])]) /length(tdata.q3)
if (is.nan(this$q3.prodcells)) this$q3.prodcells = 0
this$q4.prodcells = 100 * length(tdata.q4[which(tdata.q4>=cutoffs[3])]) /length(tdata.q4)
if (is.nan(this$q4.prodcells)) this$q4.prodcells = 0
}
}
# if only do MFI plots on producing cells
if ( checkCALC == "MFI(+)" ) {
this$bintriplot(tdata,cutoffs,bin.size=binsize,mincells=mincount,bg=TRUE)
tdata=tdata[which(tdata[,3]> cutoffs[3]),]
this$q1.total = abs(100 * length( which( tdata[,1]<cutoffs[1] &  tdata[,2]<cutoffs[2] ) ) / ncells)
this$q2.total = abs(100 * length( which( tdata[,1]>=cutoffs[1] &  tdata[,2]<cutoffs[2] ) ) / ncells)
this$q3.total = abs(100 * length( which( tdata[,1]>=cutoffs[1] &  tdata[,2]>=cutoffs[2] ) ) / ncells)
this$q4.total = abs(100 - this$q1.total - this$q2.total - this$q3.total)
}
ncells = nrow(tdata)
# get only the cells which are greater than 0
#tdata.zero = tdata[ apply(tdata[, -1], MARGIN = 1, function(row) {all(row > 0)}), ]
#tdata.zero = tdata[ apply(tdata, MARGIN = 1, function(row) {all(row > 0)}), ]
tdata.zero = tdata[ tdata[,1]>=0 & tdata[,2]>=0, ]
ncells.zero = nrow(tdata.zero)
### calc quadrants with only positive values
# q1 Quadrant unten links
# q2 Quadrant unten rechts
# q3 Quadrant oben rechts
# q4 Quadrant oben links
if ( cutoffs[1] > 0 & cutoffs[2] > 0 ) {
q1.zero = abs(100 * length( which( tdata.zero[,1]<cutoffs[1] &  tdata.zero[,2]<cutoffs[2] ) ) / ncells.zero)
if (is.nan(q1.zero)) q1.zero = 0
q2.zero = abs(100 * length( which( tdata.zero[,1]>=cutoffs[1] &  tdata.zero[,2]<cutoffs[2] ) ) / ncells.zero)
if (is.nan(q2.zero)) q2.zero = 0
q3.zero = abs(100 * length( which( tdata.zero[,1]>=cutoffs[1] &  tdata.zero[,2]>=cutoffs[2] ) ) / ncells.zero)
if (is.nan(q3.zero)) q3.zero = 0
q4.zero = abs(100 - q1.zero - q2.zero - q3.zero)
}
this$bintriplot(tdata,cutoffs,set.cex=1.4,set.cex.axes=1.2,set.mgp=c(1.8, 0.8, 0),bin.size=binsize,mincells=mincount, prodcells.color = prodcells.col, quadrants.color = quadrants.col)
# add title for single plot
#if (checkCALC == "freq") {
#	if (checkGATED == "1") firstLine=sprintf("%s(%0.1f%%): %s,cutoff=%s",displayfile,this$ncell.perc,checkCALC,cutoffs[3])
#	else firstLine=sprintf("%s: %s,cutoff=%s",displayfile,checkCALC,cutoffs[3])
#} else {
#	if (checkGATED == "1") firstLine=sprintf("%s(%0.1f%%): %s",displayfile,this$ncell.perc,checkCALC)
#	else firstLine=sprintf("%s: %s",displayfile,checkCALC)
#}
if (checkGATED == "1") firstLine=sprintf("%s(%0.1f%%): %s",displayfile,this$ncell.perc,checkCALC)
else firstLine=sprintf("%s: %s",displayfile,checkCALC)
title(main=firstLine,line=3.2,cex.main=1.4,adj=0)
#secondLine=sprintf("%s-%s(%0.1f%%); min/max=%s/%s; binsize=%s,#bins=%s",ncells,ncells.zero,(ncells.zero/ncells*100),mincount,this$maxcells,binsize,this$bincount)
if (checkCALC == "freq" | checkCALC == "MFI(+)") secondLine=sprintf("cells(min/max)=%s/%s; cutoff=%s",mincount,this$maxcells, cutoffs[3])
else secondLine=sprintf("cells(min/max)=%s/%s",mincount,this$maxcells)
title(main=secondLine,line=2.3,cex.main=1,adj=0)
#thirdLine=""
#if ( cutoffs[1] > 0 & cutoffs[2] > 0 ) {
#	thirdLine=sprintf("Q1=%0.1f/%0.1f Q2=%0.1f/%0.1f Q3=%0.1f/%0.1f Q4=%0.1f/%0.1f",q1.zero,this$q1.total,q2.zero,this$q2.total,q3.zero,this$q3.total,q4.zero,this$q4.total)
#}
thirdLine=sprintf("%s-%s(%0.1f%%); binsize=%s,#bins=%s",ncells,ncells.zero,(ncells.zero/ncells*100),binsize,this$bincount)
title(main=thirdLine,line=1.5,cex.main=1,adj=0)
if (checkGATED == "1" | grepl("temp",displayfile)) {
if ( length(this$coords.info)>2 ) {
fourthLine=sprintf("%s; %s",this$coords.info[1],this$coords.info[2])
fifthLine=sprintf("%s; %s",this$coords.info[3],this$coords.info[4])
} else {
fourthLine=sprintf("%s",paste(this$coords.info,collapse="; "))
fifthLine=""
}
title(main=fourthLine,line=0.8,cex.main=0.9,adj=0)
title(main=fifthLine,line=0.1,cex.main=0.9,adj=0)
}
}
)
#dev.off(png.cur)
if (single) {
print(paste("File saved:",png.file))
this$lastpng = png.file
}
}
fcs$saveDF<- function(n){
this=fcs
attr = this$rect.attr
# if path didnt save yet
if (!exists("lastpath",where=eval(parse(text="fcs")))){
this$lastpath = getwd()
}
file = tkgetSaveFile(defaultextension=".csv", initialdir= this$lastpath, initialfile=attr$file.name)
### remove file name to get file path
filepath = unlist(strsplit(as.character(file),"/"))
filepath = filepath[-length(filepath)]
filepath = paste(filepath,collapse="/")
this$lastpath = filepath
comments=vector(length=)
comments[1] = paste("# project:",attr$table)
comments[2] = paste("# file name:",attr$file.name)
comments[3] = paste("# selected columns:",attr$vars)
comments[4] = sprintf("# rectangle at: x=[%.1f,%.1f]; y=[%.1f,%.1f]",attr$coords[1],attr$coords[2],attr$coords[3],attr$coords[4])
comments[5] = paste("# bin size:",attr$binsize)
comments[6] = paste("# min(cells) per bin:",attr$mincout)
comments[7] = paste("# original cell count:",attr$origin.ncells)
comments[8] = paste("# selected cell count:",attr$sel.ncells)
comments[9] = paste("# selected cell count(%):",round((attr$sel.ncells/attr$origin.ncells*100),2))
# insert df content
if(!tclvalue(file)=="") {
chn = tcl("open", file, "w")
# insert comments
for (i in 1:length(comments)){
tcl("puts",chn,comments[i])
print(comments[i])
}
# insert dataframe
df <- eval(parse(text=paste("this$dataframes",n, sep="")))
tmp = colnames(df)[1]
for ( i in 2:ncol(df)){
tmp = paste(tmp,colnames(df)[i],sep=",")
}
print(tmp)
tcl("puts", chn, tmp)
for (j in 1:nrow(df)) {
tmp =df[j,1]
for (k in 2:ncol(df)){
tmp =  paste(tmp,df[j,k],sep=",")
}
tcl("puts", chn,tmp)
}
tcl("close", chn)
print(paste("Table Saved: ",tclvalue(file)))
}
}
fcs$saveCode <- function(){
this=fcs
# if didn't save yet
#if (!exists("lastfile",where=eval(parse(text=tkparent(this$treewidget,"lastfile"))))){
#if (!exists("lastfile",where=eval(parse(text="fcs")))){
#	this$lastfile = paste(getwd(),"/3D_plotter_",this$version,".r",sep="")
#}
# if path didnt save yet
if (!exists("lastpath",where=eval(parse(text="fcs")))){
this$lastpath = getwd()
}
file = tkgetSaveFile(defaultextension=".r", initialdir= this$lastpath, initialfile=paste("/3D_plotter_",this$version,".r",sep=""))
### remove file name to get file path
filepath = unlist(strsplit(as.character(file),"/"))
filepath = filepath[-length(filepath)]
filepath = paste(filepath,collapse="/")
this$lastpath = filepath
if(!tclvalue(file)=="") {
chn = tcl("open", file, "w")
tcl("puts", chn, tkget(this$txt,"0.0","end"))
tcl("close", chn)
}
}
fcs$saveCutoffsToDB <- function() {
this=fcs
if (this$working) {
printf("w: saveCutoffsToDB: cutoffs saved for table=%s file.idx=%s",this$current.table,this$current.fileindex2)
printf("w: %s",paste(unlist(this$new.cutoffs),collapse=" "))
}
new.staintable=cbind(this$current.staintable[,1:4],unlist(this$new.cutoffs[!is.na(this$new.cutoffs)]),unlist(this$new.checks[!is.na(this$new.checks)]))
colnames(new.staintable)[5] = "file_savedCutoffs"
colnames(new.staintable)[6] = "file_savedChecks"
if (this$working) print(head(new.staintable))
#idx.stain=grep(paste0(this$current.table,this$markerid_name),dbListTables(this$conn))
#idx.stain=which(dbListTables(this$conn)==paste0(this$current.table,this$markerid_name))
### get name of stain table
name.stain=paste0(this$current.table,this$markerid_name)
### remove and rewrite stain table
dbRemoveTable(this$conn,name.stain)
dbWriteTable(this$conn,name.stain,new.staintable)
printf("Cutoffs saved in %s",name.stain)
}
fcs$changeFI.range <- function (mode) {
this=fcs
if ( mode == 1 ) {
tclvalue(this$rbtrans) = "asinh"
tclvalue(this$vminvalX) = this$current.asinh$x[1]
tclvalue(this$vmaxvalX) = this$current.asinh$x[2]
tclvalue(this$vminvalY) = this$current.asinh$y[1]
tclvalue(this$vmaxvalY) = this$current.asinh$y[2]
## change in triploT
tkset(this$binsize,this$current.asinh$binsize)
tkset(this$mincount,this$current.asinh$mincount)
## change in tetraploT
#tkset(this$binsizetetra,this$current.asinh$binsize)
#tkset(this$mincounttetra,this$current.asinh$mincount)
## change in triploT Overview
#tkset(this$binsizeOverview,this$current.asinh$binsize)
#tkset(this$mincountOverview,this$current.asinh$mincount)
## change in diploT
tkset(this$binsizedi,this$current.asinh$binsize)
tkset(this$mincountdi,this$current.asinh$mincount)
} else if (mode == 2) {
tclvalue(this$rbtrans) = "biex"
tclvalue(this$vminvalX) = this$current.biex$x[1]
tclvalue(this$vmaxvalX) = this$current.biex$x[2]
tclvalue(this$vminvalY) = this$current.biex$y[1]
tclvalue(this$vmaxvalY) = this$current.biex$y[2]
## change in triploT
tkconfigure(this$binsize,values=this$bin.sizes.biex)
tkset(this$binsize,this$current.biex$binsize)
tkset(this$mincount,this$current.biex$mincount)
## change in tetraploT
#tkconfigure(this$binsizetetra,values=this$bin.sizes.biex)
#tkset(this$binsizetetra,this$current.biex$binsize)
#tkset(this$mincounttetra,this$current.biex$mincount)
## change in triploT Overview
#tkconfigure(this$binsizeOverview,values=this$bin.sizes.biex)
#tkset(this$binsizeOverview,this$current.biex$binsize)
#tkset(this$mincountOverview,this$current.biex$mincount)
## change in diploT
tkconfigure(this$binsizedi,values=this$bin.sizes.biex)
tkset(this$binsizedi,this$current.biex$binsize)
tkset(this$mincountdi,this$current.biex$mincount)
}
}
fcs$connectDb<- function(fname) {
this=fcs
this$conn <- dbConnect(SQLite(), dbname = fname)
print(paste("Database opened:",fname))
}
fcs$disconnectDb <- function () {
this=fcs
dbDisconnect(this$conn)
print(paste("Database closed:",file.path(this$db.path,this$db.name)))
}
fcs$mytkopentree <- function (widget,node,...) {
tkitemconfigure(widget,node,image=imageBookOpen)
}
fcs$mytkclosetree <- function (widget,node,...) {
tkitemconfigure(widget,node,image=imageBook)
}
fcs$start <- function () {
this=fcs
if (file.exists(file.path(fcs$db.path,fcs$db.name))) {
fcs$connectDb(file.path(fcs$db.path,fcs$db.name))
} else {
file <- tclvalue(tkgetOpenFile(initialdir=fcs$db.path,defaultextension="sqlite3"))
if (file.exists(file)) {
this$connectDb(file)
this$db.name=file
}
}
this$plotWindowExists=FALSE
this$GUImain()
}
fcs$exit <- function() {
this=fcs
continue = FALSE
saveCutoffs = FALSE
answer=tclVar("no")
### save current cutoffs
this$refreshCutoffs(current=TRUE)
### test if cutoffs had been changed
new = unlist(this$new.cutoffs)
saved = unlist(this$saved.cutoffs)
both <- new[!is.na(new)] == saved[!is.na(saved)]
new2 = unlist(this$new.checks)
saved2 = unlist(this$saved.checks)
both2 <- new2[!is.na(new2)] == saved2[!is.na(saved2)]
### if cutoffs did not change
# if length(new) == length(saved)
# if both == TRUE and cutoffs were already saved in DB
#if ( length(new) == length(saved) ) {
#if ( ((all(both) & length(saved)>0) | all(new==0))  & ((all(both2) & length(saved2)>0) | all(new2==0) ) )  {
if ( ((all(both) & length(saved)>0)) & ((all(both2) & length(saved2)>0)) )  {
### if cutoffs did not change
if (this$working==FALSE) {
answer = tkmessageBox(title = "Quitting..", message = "Are you sure?", icon = "info", type = "yesno")
if ( tclvalue(answer) == "yes" ) continue = TRUE
}
} else {
### if cutoffs have been changed
answer=tkmessageBox(title = "Quitting..", message = "Save cutoffs?", icon = "info", type = "yesnocancel")
if ( tclvalue(answer) == "yes" | tclvalue(answer) == "no" ) continue = TRUE
if ( tclvalue(answer) == "yes" ) saveCutoffs = TRUE
}
if (this$working) {continue=TRUE; tclvalue(answer)="yes"; printf("w: do exit saveCutoffs=%s continue=%s answer=%s",saveCutoffs,continue,tclvalue(answer))}
if ( continue ) {
tkdestroy(this$tt)
if ( class(this$pb) != "NULL" ) close(this$pb)
if (exists("ttdebug",where=eval(parse(text="fcs")))) {tkdestroy(this$ttdebug)}
if (exists("ttpreproc",where=eval(parse(text="fcs")))) {tkdestroy(this$ttpreproc)}
if (this$ttprojectsopen) {tkdestroy(this$ttprojects)}
graphics.off()
if(file.exists(this$png.file)) system(paste("rm ",this$png.file,sep=""))
temp.table.idx = grep("^temp\\d+",dbListTables(this$conn))
len = length(temp.table.idx)
if ( len > 0 ) {
for ( i in len:1 ) {
table.name = dbListTables(this$conn)[temp.table.idx[i]]
dbRemoveTable(this$conn,table.name)
print(paste0("Removing temporary table '",table.name,"'"))
}
}
### save cutoffs into MarkerInfo table
if ( saveCutoffs ) this$saveCutoffsToDB()
this$disconnectDb()
}
}
fcs$exitandstart <- function () {
this=fcs
this$exit()
source("YH_3D_plotter.r")
#source("20170316.r")
}
if (length(strsplit(fcs$db.name,"")[[1]]) > 0) {
fcs$connectDb(file.path(fcs$db.path,fcs$db.name))
} else {
file <- tclvalue(tkgetOpenFile(initialdir=fcs$db.path,defaultextension="sqlite3"))
fcs$connectDb(file)
fcs$db.name=file
}
fcs$GUImain()
# add library Path
.libPaths(c(.libPaths(),"Y:/AG_Baumgrass/Alexander.Rybak/win-library/3.4"))
# set working directory
setwd("Y:/AG_Baumgrass/AG-PRI/PRIbase")
# set paths for app and databases
App.path="Y:/AG_Baumgrass/AG-PRI/PRIbase/App20170929"
DB.path="Y:/AG_Baumgrass/AG-PRI/PRIbase/DB/"
# Loads all needed packages.
source("App20170929/www/packages.R")
# Starts App.
runApp("App20170929/")
